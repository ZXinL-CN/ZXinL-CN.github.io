<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XinL</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zxinl-cn.github.io/"/>
  <updated>2020-08-16T04:36:19.721Z</updated>
  <id>https://zxinl-cn.github.io/</id>
  
  <author>
    <name>Xin L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第三篇文章</title>
    <link href="https://zxinl-cn.github.io/posts/2688189453.html"/>
    <id>https://zxinl-cn.github.io/posts/2688189453.html</id>
    <published>2020-08-08T08:58:00.000Z</published>
    <updated>2020-08-16T04:36:19.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是第三篇测试文章"><a href="#这是第三篇测试文章" class="headerlink" title="这是第三篇测试文章"></a>这是第三篇测试文章</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>插入一张图片</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://gitee.com/x-in/BlogImg/raw/master/imgs/img93.jpg" class="lozad post-image"src="https://gitee.com/x-in/BlogImg/raw/master/imgs/img93.jpg"></p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://gitee.com/x-in/BlogImg/raw/master/imgs/img114.jpg" class="lozad post-image"src="https://gitee.com/x-in/BlogImg/raw/master/imgs/img114.jpg"></p>]]></content>
    
    <summary type="html">
    
      这里是一条测试简介
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JS基础——ECMAScript的对象</title>
    <link href="https://zxinl-cn.github.io/posts/2018365746.html"/>
    <id>https://zxinl-cn.github.io/posts/2018365746.html</id>
    <published>2020-08-08T04:52:46.059Z</published>
    <updated>2020-08-17T00:26:40.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><p>🧡💛💚💙💜🤎《一路向北》——周杰伦🎵</p><p><audio data-v-131160d2="" id="migu_audio" controls src="//freetyst.nf.migu.cn/public/product9th/product41/2020/08/1013/2009%E5%B9%B406%E6%9C%8826%E6%97%A5%E5%8D%9A%E5%B0%94%E6%99%AE%E6%96%AF/%E6%AD%8C%E6%9B%B2%E4%B8%8B%E8%BD%BD/MP3_40_16_Stero/60054701958132127.mp3?key=736d151cf3e171bd&amp;Tim=1597626638416&amp;channelid=00&amp;msisdn=2712cebab7b546d496153e0fde714528&amp;CI=600547019582600902000006889222&amp;F=000009"></audio></p><blockquote><p>ECMA-262把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数。”</p><p>严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样，我们可以把ECMAScript的对象想象成散列表：无非就是一组名值对，其中值可以是数据或函数。</p><p>每个对象都是基于一个引用类型创建的，这个引用类型可以是原生类型，也可以是开发人员定义的类型。</p></blockquote><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>创建自定义对象的最简单方式就是创建一个Object的实例，然后再为它添加属性和方法，如下所示。</p><pre class="highlight"><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">person.age = <span class="number">20</span>;</span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br></pre><p>上面的例子创建了一个名为person的对象，并为它添加了两个属性（name、age）和一个方法（sayName()）。其中，sayName()方法用于显示this.name（将被解析为person.name）的值。</p><p>另一种创建对象的模式叫做对象字面量。前面的例子用对象字面量语法可以写成这样：</p><pre class="highlight"><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    name:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    age:<span class="number">29</span>,</span><br><span class="line">    </span><br><span class="line">    sayName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre><h2 id="三种创建对象的模式"><a href="#三种创建对象的模式" class="headerlink" title="三种创建对象的模式"></a>三种创建对象的模式</h2><p><strong>虽然Object构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，可以使用工厂模式的一种变体。</strong></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>在ECMAScript中无法创建类，但是可以用函数来封装以特定接口创建对象的细节，如下面的例子所示。</p><pre class="highlight"><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">&quot;zhagnsan&quot;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">&quot;lisi&quot;</span>,<span class="number">21</span>);</span><br></pre><p>函数createPerson()能够根据接受的参数来构建一个包含所有必要信息的Person对象。可以无数次地调用这个函数，而每次它都会返回一个包含两个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。随着JavaScript的发展，又一个新模式出现了。</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>在ECMAScript中的构造函数可用来创建特定类型的对象。像Object和Array这样的原生构造函数，在运行时会自动出现在执行环境中。</p><p>此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。例如，可以使用构造函数模式将前面的例子重写如下。</p><p><img  srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://gitee.com/x-in/BlogImg/raw/master/imgs/csdn_end.jpg" class="lozad post-image"src="https://gitee.com/x-in/BlogImg/raw/master/imgs/csdn_end.jpg"></p>]]></content>
    
    <summary type="html">
    
      每个对象都是基于一个引用类型创建的，这个引用类型可以是原生类型，也可以是开发人员定义的类型。
    
    </summary>
    
    
      <category term="前端" scheme="https://zxinl-cn.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://zxinl-cn.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>第二篇博客</title>
    <link href="https://zxinl-cn.github.io/posts/3176525040.html"/>
    <id>https://zxinl-cn.github.io/posts/3176525040.html</id>
    <published>2020-08-08T04:38:25.000Z</published>
    <updated>2020-08-08T04:46:34.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于hexo的一些配置"><a href="#关于hexo的一些配置" class="headerlink" title="关于hexo的一些配置"></a>关于hexo的一些配置</h2><h3 id="URL的优化"><a href="#URL的优化" class="headerlink" title="URL的优化"></a>URL的优化</h3><blockquote><p>hexo的默认永久链接是在_config.yml里的配置permalink: :year/:month/:day/:title/。这种默认配置有个很不能接受的缺点，文件名为中文，会导致url链接里面出现中文。可以通过安装<code>hexo-abbrlink</code>插件来解决这个问题。</p></blockquote><h3 id="安装hexo-abbrlink插件"><a href="#安装hexo-abbrlink插件" class="headerlink" title="安装hexo-abbrlink插件"></a>安装hexo-abbrlink插件</h3><pre class="highlight"><span class="line">npm install hexo-abbrlink --save </span><br></pre><h3 id="修改配置文件-config-yml"><a href="#修改配置文件-config-yml" class="headerlink" title="修改配置文件_config.yml"></a>修改配置文件_config.yml</h3><p>在 Hexo 的根目录的配置文件_config.yml 中做出以下修改：</p><p>站点配置文件(_config.yml)里:</p><pre class="highlight"><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line"># permalink_defaults:</span><br><span class="line">permalink: post/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre><p>使用hexo g 会自动在你的文章中加上abbrlink: 4278564287</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于hexo的一些配置&quot;&gt;&lt;a href=&quot;#关于hexo的一些配置&quot; class=&quot;headerlink&quot; title=&quot;关于hexo的一些配置&quot;&gt;&lt;/a&gt;关于hexo的一些配置&lt;/h2&gt;&lt;h3 id=&quot;URL的优化&quot;&gt;&lt;a href=&quot;#URL的优化&quot; cla
      
    
    </summary>
    
    
      <category term="综合" scheme="https://zxinl-cn.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
      <category term="hexo" scheme="https://zxinl-cn.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="https://zxinl-cn.github.io/posts/4278564287.html"/>
    <id>https://zxinl-cn.github.io/posts/4278564287.html</id>
    <published>2020-08-08T04:21:52.000Z</published>
    <updated>2020-08-08T04:47:29.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用hexo-github搭建静态博客-window10环境"><a href="#使用hexo-github搭建静态博客-window10环境" class="headerlink" title="使用hexo+github搭建静态博客(window10环境)"></a>使用hexo+github搭建静态博客(window10环境)</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ol><li><a href="https://nodejs.org/en/download/" title="点击进入下载页面">安装node.js</a> (选择LTS稳定版本)  ，点击下载，根据提示安装即可。</li><li>打开命令行工具输入<code>node -v</code>查看node.js版本，若出现版本号，则表示安装成功</li><li>输入<code>npm -v</code>查看npm版本（npm是一个node附带的包管理工具，类似于node的应用商店）</li><li>安装淘宝<code>cnpm</code>管理器（由于npm使用的是外网服务器，因此下载速度手抖了极大的限制）这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></li><li>输入<code>cnpm -v</code>查看cnpm版本</li></ol><h3 id="安装Git（关于Git的使用请查看-Pro-Git）"><a href="#安装Git（关于Git的使用请查看-Pro-Git）" class="headerlink" title="安装Git（关于Git的使用请查看 Pro Git）"></a>安装Git（关于Git的使用请查看 <a href="https://www.progit.cn/">Pro Git</a>）</h3><ol><li>由于网速原因，同样使用淘宝镜像下载Git, 访问 :<br><code>https://npm.taobao.org/mirrors/git-for-windows/</code><br>在页面最下方找到最新版，点击下载，根据提示安装即可。</li><li>初次运行 Git 前的配置:在开始菜单打开<code>Git bash</code><br>输入命令<code>$ git config --global user.name &quot;John Doe&quot;</code>设置用户名<br>输入命令<code>$ git config --global user.email johndoe@example.com</code>设置邮箱</li><li>使用<code>git config --list</code>命令检查配置信息  </li></ol><h3 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h3><ol><li>在命令行工具中输入<code>cnpm install -g hexo-cli</code>安装hexo框架  </li><li>输入<code>hexo -v</code>查看hexo版本  </li><li>输入<code>mkdir blog</code>创建blog文件夹</li><li>输入<code>cd blog</code>j进入blog文件夹</li><li>输入<code>hexo init</code>生成博客 初始化博客</li><li>输入<code>hexo s</code>启动本地博客服务</li><li>打开浏览器访问 <code>http://localhost:4000/</code> 可以看到博客本地访问成功</li><li>输入<code>ctrl+C</code>停止博客服务，输入<code>hexo n “我的第一篇博文”</code>创建新文章</li><li>所有文章都存放于<code>./blog/source/</code>路径下的文件夹中</li><li>在<code>blog</code>文件夹中，输入<code>hexo clean</code>清除缓存，输入<code>hexo g</code>重新生成,重新启动<code>hexo s</code>，访问 <code>http://localhost:4000/</code> 可以看到新的文章已经发布</li><li><code>ctrl+C</code>停止博客服务，输入<code>cnpm install --save hexo-deployer-git</code>在blog目录下安装Git部署插件</li></ol><h3 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h3><ol><li>打开GitHub创建新的仓库，命名为 <code>YourGithubName.github.io</code>,前面是 你的GitHub账户名字+后缀<code>.github.io</code>，格式不能改变。</li><li>点击创建。创建成功，复制仓库地址。</li></ol><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 _config.yml</h3><ol><li>打开blog目录下的<code>_config.yml</code>文件，在最下方找到<code>deploy</code></li><li>将以下配置添加到<code>_config.yml</code>(删除现有行，如果有)  </li></ol><pre class="highlight"><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git  </span><br><span class="line">  repo: https://github.com/<span class="tag">&lt;<span class="name">youGitHubName</span>&gt;</span>.github.io    //仓库地址  </span><br><span class="line">  branch: master  </span><br><span class="line"></span><br></pre><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><ol><li>输入命令<code>hexo d</code>将博客部署到GitHub仓库</li><li>在浏览器输入<code>https://YourGithubName.github.io/</code> 访问这个地址可以查看博客  </li></ol><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><ol><li>通过命令<code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code>将yilia主题下载到本地</li><li>修改blog目录下的 _config.yml 文件,将<code>theme</code>项，修改为<code>yilia</code></li><li><code>hexo clean</code>清理缓存;<code>hexo g</code>重新生成;<code>hexo d</code>部署到GitHub仓库</li><li>访问<code>https://YourGithubName.github.io/</code> 查看博客  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用hexo-github搭建静态博客-window10环境&quot;&gt;&lt;a href=&quot;#使用hexo-github搭建静态博客-window10环境&quot; class=&quot;headerlink&quot; title=&quot;使用hexo+github搭建静态博客(window10环境)&quot;
      
    
    </summary>
    
    
      <category term="综合" scheme="https://zxinl-cn.github.io/categories/%E7%BB%BC%E5%90%88/"/>
    
    
      <category term="hexo" scheme="https://zxinl-cn.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zxinl-cn.github.io/posts/1243066710.html"/>
    <id>https://zxinl-cn.github.io/posts/1243066710.html</id>
    <published>2020-08-02T05:41:39.350Z</published>
    <updated>2020-08-08T04:48:27.578Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="highlight"><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="highlight"><span class="line">$ hexo server</span><br></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="highlight"><span class="line">$ hexo generate</span><br></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="highlight"><span class="line">$ hexo deploy</span><br></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
